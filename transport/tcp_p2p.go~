package transport

import (
	"net"

	"github.com/golang/glog"
	reuseport "github.com/libp2p/go-reuseport"
	"github.com/wweir/sower/transport/router"
)

type p2pTcp struct {
	laddr  string
	raddr  string
	broker *net.Conn
}

func NewTCPP2P(laddr, raddr string, brokerTran Transport) (Transport, error) {
	go func() {
		broker.Dial("")
	}()
	return &p2pTcp{
		laddr: laddr,
		raddr: raddr,
	}, nil
}

func (t *p2pTcp) Dial(addr string) (net.Conn, error) {

	conn, err := reuseport.Dial("tcp", t.laddr, target)
	if err != nil {
		return nil, err
	}

	conn.(*net.TCPConn).SetKeepAlive(true)

	return &router.TargetConn{conn, addr}.Init()
}

func (t *p2pTcp) Listen(addr string) (<-chan *router.TargetConn, error) {
	ln, err := net.Listen("tcp", addr)
	if err != nil {
		return nil, err
	}

	connCh := make(chan *router.TargetConn)
	go func() {
		for {
			conn, err := ln.Accept()
			if err != nil {
				glog.Fatalln("TCP listen:", err)
			}
			conn.(*net.TCPConn).SetKeepAlive(true)

			c, addr, err := router.ParseAddr(conn)
			if err != nil {
				glog.Errorln("parse addr:", err)
			}
			connCh <- &router.TargetConn{c, addr}
		}
	}()
	return connCh, nil
}
